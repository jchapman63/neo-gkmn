// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: monsters.sql

package database

import (
	"context"
)

const createMonster = `-- name: CreateMonster :exec
INSERT INTO monster (id, name, type, baseHp)
    VALUES ($1, $2, $3, $4)
`

type CreateMonsterParams struct {
	ID     string
	Name   string
	Type   string
	Basehp int32
}

func (q *Queries) CreateMonster(ctx context.Context, arg CreateMonsterParams) error {
	_, err := q.db.Exec(ctx, createMonster,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Basehp,
	)
	return err
}

const createMove = `-- name: CreateMove :exec
INSERT INTO MOVE (id, name, power, type)
    VALUES ($1, $2, $3, $4)
`

type CreateMoveParams struct {
	ID    string
	Name  string
	Power int32
	Type  string
}

func (q *Queries) CreateMove(ctx context.Context, arg CreateMoveParams) error {
	_, err := q.db.Exec(ctx, createMove,
		arg.ID,
		arg.Name,
		arg.Power,
		arg.Type,
	)
	return err
}

const createStatForMon = `-- name: CreateStatForMon :exec
INSERT INTO stats (monsterID, statType, power)
    VALUES ($1, $2, $3)
`

type CreateStatForMonParams struct {
	Monsterid string
	Stattype  string
	Power     int32
}

func (q *Queries) CreateStatForMon(ctx context.Context, arg CreateStatForMonParams) error {
	_, err := q.db.Exec(ctx, createStatForMon, arg.Monsterid, arg.Stattype, arg.Power)
	return err
}

const fetchMonster = `-- name: FetchMonster :one
SELECT
    id, name, type, basehp
FROM
    monster
WHERE
    id = $1
`

func (q *Queries) FetchMonster(ctx context.Context, id string) (Monster, error) {
	row := q.db.QueryRow(ctx, fetchMonster, id)
	var i Monster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Basehp,
	)
	return i, err
}

const fetchMove = `-- name: FetchMove :one
SELECT
    id, name, power, type
FROM
    MOVE
WHERE
    id = $1
`

func (q *Queries) FetchMove(ctx context.Context, id string) (Move, error) {
	row := q.db.QueryRow(ctx, fetchMove, id)
	var i Move
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Power,
		&i.Type,
	)
	return i, err
}

const fetchMovesForMon = `-- name: FetchMovesForMon :many
SELECT
    monsterid, moveid
FROM
    movemap
WHERE
    monsterid = $1
`

func (q *Queries) FetchMovesForMon(ctx context.Context, monsterid string) ([]Movemap, error) {
	rows, err := q.db.Query(ctx, fetchMovesForMon, monsterid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movemap
	for rows.Next() {
		var i Movemap
		if err := rows.Scan(&i.Monsterid, &i.Moveid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchStat = `-- name: FetchStat :one
SELECT
    monsterid, stattype, power
FROM
    stats
WHERE
    monsterID = $1::uuid
    AND statType = $2::text
`

type FetchStatParams struct {
	MonsterID string
	StatType  string
}

func (q *Queries) FetchStat(ctx context.Context, arg FetchStatParams) (Stat, error) {
	row := q.db.QueryRow(ctx, fetchStat, arg.MonsterID, arg.StatType)
	var i Stat
	err := row.Scan(&i.Monsterid, &i.Stattype, &i.Power)
	return i, err
}

const listMonsters = `-- name: ListMonsters :many
SELECT
    id, name, type, basehp
FROM
    monster
`

func (q *Queries) ListMonsters(ctx context.Context) ([]Monster, error) {
	rows, err := q.db.Query(ctx, listMonsters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Monster
	for rows.Next() {
		var i Monster
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Basehp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerMoveForMon = `-- name: RegisterMoveForMon :exec
INSERT INTO movemap (monsterID, moveID)
    VALUES ($1, $2)
`

type RegisterMoveForMonParams struct {
	Monsterid string
	Moveid    string
}

func (q *Queries) RegisterMoveForMon(ctx context.Context, arg RegisterMoveForMonParams) error {
	_, err := q.db.Exec(ctx, registerMoveForMon, arg.Monsterid, arg.Moveid)
	return err
}

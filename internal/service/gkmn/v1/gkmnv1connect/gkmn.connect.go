// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gkmn/v1/gkmn.proto

package gkmnv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jchapman63/neo-gkmn/internal/service/gkmn/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GkmnServiceName is the fully-qualified name of the GkmnService service.
	GkmnServiceName = "jchapman63.gkmn.v1.GkmnService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GkmnServiceCreateBattleProcedure is the fully-qualified name of the GkmnService's CreateBattle
	// RPC.
	GkmnServiceCreateBattleProcedure = "/jchapman63.gkmn.v1.GkmnService/CreateBattle"
	// GkmnServiceAttackMonsterProcedure is the fully-qualified name of the GkmnService's AttackMonster
	// RPC.
	GkmnServiceAttackMonsterProcedure = "/jchapman63.gkmn.v1.GkmnService/AttackMonster"
	// GkmnServiceListMonstersProcedure is the fully-qualified name of the GkmnService's ListMonsters
	// RPC.
	GkmnServiceListMonstersProcedure = "/jchapman63.gkmn.v1.GkmnService/ListMonsters"
	// GkmnServiceListBattleMonstersProcedure is the fully-qualified name of the GkmnService's
	// ListBattleMonsters RPC.
	GkmnServiceListBattleMonstersProcedure = "/jchapman63.gkmn.v1.GkmnService/ListBattleMonsters"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gkmnServiceServiceDescriptor                  = v1.File_gkmn_v1_gkmn_proto.Services().ByName("GkmnService")
	gkmnServiceCreateBattleMethodDescriptor       = gkmnServiceServiceDescriptor.Methods().ByName("CreateBattle")
	gkmnServiceAttackMonsterMethodDescriptor      = gkmnServiceServiceDescriptor.Methods().ByName("AttackMonster")
	gkmnServiceListMonstersMethodDescriptor       = gkmnServiceServiceDescriptor.Methods().ByName("ListMonsters")
	gkmnServiceListBattleMonstersMethodDescriptor = gkmnServiceServiceDescriptor.Methods().ByName("ListBattleMonsters")
)

// GkmnServiceClient is a client for the jchapman63.gkmn.v1.GkmnService service.
type GkmnServiceClient interface {
	CreateBattle(context.Context, *connect.Request[v1.GkmnServiceCreateBattleRequest]) (*connect.Response[v1.GkmnServiceCreateBattleResponse], error)
	AttackMonster(context.Context, *connect.Request[v1.GkmnServiceAttackMonsterRequest]) (*connect.Response[v1.GkmnServiceAttackMonsterResponse], error)
	ListMonsters(context.Context, *connect.Request[v1.GkmnServiceBaseMonsterListRequest]) (*connect.Response[v1.GkmnServiceBaseMonsterListResponse], error)
	ListBattleMonsters(context.Context, *connect.Request[v1.GkmnServiceListBattleMonsterRequest]) (*connect.Response[v1.GkmnServiceListBattleMonsterResponse], error)
}

// NewGkmnServiceClient constructs a client for the jchapman63.gkmn.v1.GkmnService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGkmnServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GkmnServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gkmnServiceClient{
		createBattle: connect.NewClient[v1.GkmnServiceCreateBattleRequest, v1.GkmnServiceCreateBattleResponse](
			httpClient,
			baseURL+GkmnServiceCreateBattleProcedure,
			connect.WithSchema(gkmnServiceCreateBattleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		attackMonster: connect.NewClient[v1.GkmnServiceAttackMonsterRequest, v1.GkmnServiceAttackMonsterResponse](
			httpClient,
			baseURL+GkmnServiceAttackMonsterProcedure,
			connect.WithSchema(gkmnServiceAttackMonsterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMonsters: connect.NewClient[v1.GkmnServiceBaseMonsterListRequest, v1.GkmnServiceBaseMonsterListResponse](
			httpClient,
			baseURL+GkmnServiceListMonstersProcedure,
			connect.WithSchema(gkmnServiceListMonstersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listBattleMonsters: connect.NewClient[v1.GkmnServiceListBattleMonsterRequest, v1.GkmnServiceListBattleMonsterResponse](
			httpClient,
			baseURL+GkmnServiceListBattleMonstersProcedure,
			connect.WithSchema(gkmnServiceListBattleMonstersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gkmnServiceClient implements GkmnServiceClient.
type gkmnServiceClient struct {
	createBattle       *connect.Client[v1.GkmnServiceCreateBattleRequest, v1.GkmnServiceCreateBattleResponse]
	attackMonster      *connect.Client[v1.GkmnServiceAttackMonsterRequest, v1.GkmnServiceAttackMonsterResponse]
	listMonsters       *connect.Client[v1.GkmnServiceBaseMonsterListRequest, v1.GkmnServiceBaseMonsterListResponse]
	listBattleMonsters *connect.Client[v1.GkmnServiceListBattleMonsterRequest, v1.GkmnServiceListBattleMonsterResponse]
}

// CreateBattle calls jchapman63.gkmn.v1.GkmnService.CreateBattle.
func (c *gkmnServiceClient) CreateBattle(ctx context.Context, req *connect.Request[v1.GkmnServiceCreateBattleRequest]) (*connect.Response[v1.GkmnServiceCreateBattleResponse], error) {
	return c.createBattle.CallUnary(ctx, req)
}

// AttackMonster calls jchapman63.gkmn.v1.GkmnService.AttackMonster.
func (c *gkmnServiceClient) AttackMonster(ctx context.Context, req *connect.Request[v1.GkmnServiceAttackMonsterRequest]) (*connect.Response[v1.GkmnServiceAttackMonsterResponse], error) {
	return c.attackMonster.CallUnary(ctx, req)
}

// ListMonsters calls jchapman63.gkmn.v1.GkmnService.ListMonsters.
func (c *gkmnServiceClient) ListMonsters(ctx context.Context, req *connect.Request[v1.GkmnServiceBaseMonsterListRequest]) (*connect.Response[v1.GkmnServiceBaseMonsterListResponse], error) {
	return c.listMonsters.CallUnary(ctx, req)
}

// ListBattleMonsters calls jchapman63.gkmn.v1.GkmnService.ListBattleMonsters.
func (c *gkmnServiceClient) ListBattleMonsters(ctx context.Context, req *connect.Request[v1.GkmnServiceListBattleMonsterRequest]) (*connect.Response[v1.GkmnServiceListBattleMonsterResponse], error) {
	return c.listBattleMonsters.CallUnary(ctx, req)
}

// GkmnServiceHandler is an implementation of the jchapman63.gkmn.v1.GkmnService service.
type GkmnServiceHandler interface {
	CreateBattle(context.Context, *connect.Request[v1.GkmnServiceCreateBattleRequest]) (*connect.Response[v1.GkmnServiceCreateBattleResponse], error)
	AttackMonster(context.Context, *connect.Request[v1.GkmnServiceAttackMonsterRequest]) (*connect.Response[v1.GkmnServiceAttackMonsterResponse], error)
	ListMonsters(context.Context, *connect.Request[v1.GkmnServiceBaseMonsterListRequest]) (*connect.Response[v1.GkmnServiceBaseMonsterListResponse], error)
	ListBattleMonsters(context.Context, *connect.Request[v1.GkmnServiceListBattleMonsterRequest]) (*connect.Response[v1.GkmnServiceListBattleMonsterResponse], error)
}

// NewGkmnServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGkmnServiceHandler(svc GkmnServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gkmnServiceCreateBattleHandler := connect.NewUnaryHandler(
		GkmnServiceCreateBattleProcedure,
		svc.CreateBattle,
		connect.WithSchema(gkmnServiceCreateBattleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gkmnServiceAttackMonsterHandler := connect.NewUnaryHandler(
		GkmnServiceAttackMonsterProcedure,
		svc.AttackMonster,
		connect.WithSchema(gkmnServiceAttackMonsterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gkmnServiceListMonstersHandler := connect.NewUnaryHandler(
		GkmnServiceListMonstersProcedure,
		svc.ListMonsters,
		connect.WithSchema(gkmnServiceListMonstersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gkmnServiceListBattleMonstersHandler := connect.NewUnaryHandler(
		GkmnServiceListBattleMonstersProcedure,
		svc.ListBattleMonsters,
		connect.WithSchema(gkmnServiceListBattleMonstersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/jchapman63.gkmn.v1.GkmnService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GkmnServiceCreateBattleProcedure:
			gkmnServiceCreateBattleHandler.ServeHTTP(w, r)
		case GkmnServiceAttackMonsterProcedure:
			gkmnServiceAttackMonsterHandler.ServeHTTP(w, r)
		case GkmnServiceListMonstersProcedure:
			gkmnServiceListMonstersHandler.ServeHTTP(w, r)
		case GkmnServiceListBattleMonstersProcedure:
			gkmnServiceListBattleMonstersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGkmnServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGkmnServiceHandler struct{}

func (UnimplementedGkmnServiceHandler) CreateBattle(context.Context, *connect.Request[v1.GkmnServiceCreateBattleRequest]) (*connect.Response[v1.GkmnServiceCreateBattleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("jchapman63.gkmn.v1.GkmnService.CreateBattle is not implemented"))
}

func (UnimplementedGkmnServiceHandler) AttackMonster(context.Context, *connect.Request[v1.GkmnServiceAttackMonsterRequest]) (*connect.Response[v1.GkmnServiceAttackMonsterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("jchapman63.gkmn.v1.GkmnService.AttackMonster is not implemented"))
}

func (UnimplementedGkmnServiceHandler) ListMonsters(context.Context, *connect.Request[v1.GkmnServiceBaseMonsterListRequest]) (*connect.Response[v1.GkmnServiceBaseMonsterListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("jchapman63.gkmn.v1.GkmnService.ListMonsters is not implemented"))
}

func (UnimplementedGkmnServiceHandler) ListBattleMonsters(context.Context, *connect.Request[v1.GkmnServiceListBattleMonsterRequest]) (*connect.Response[v1.GkmnServiceListBattleMonsterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("jchapman63.gkmn.v1.GkmnService.ListBattleMonsters is not implemented"))
}
